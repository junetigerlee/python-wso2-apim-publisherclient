# coding: utf-8

"""
    WSO2 API Manager - Publisher API

    This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DocumentIndividualApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def apis_api_id_documents_document_id_content_get(self, api_id, document_id, **kwargs):
        """
        Get the content of an API document
        This operation can be used to retrive the content of an API's document.  The document can be of 3 types. In each cases responses are different.  1. **Inline type**:    The content of the document will be retrieved in `text/plain` content type 2. **FILE type**:     The file will be downloaded with the related content type (eg. `application/pdf`) 3. **URL type**:     The client will recieve the URL of the document as the Location header with the response with - `303 See Other` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_content_get(api_id, document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str accept: Media types acceptable for the response. Default is application/json. 
        :param str if_none_match: Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec. 
        :param str if_modified_since: Validator for conditional requests; based on Last Modified header of the formerly retrieved variant of the resource. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apis_api_id_documents_document_id_content_get_with_http_info(api_id, document_id, **kwargs)
        else:
            (data) = self.apis_api_id_documents_document_id_content_get_with_http_info(api_id, document_id, **kwargs)
            return data

    def apis_api_id_documents_document_id_content_get_with_http_info(self, api_id, document_id, **kwargs):
        """
        Get the content of an API document
        This operation can be used to retrive the content of an API's document.  The document can be of 3 types. In each cases responses are different.  1. **Inline type**:    The content of the document will be retrieved in `text/plain` content type 2. **FILE type**:     The file will be downloaded with the related content type (eg. `application/pdf`) 3. **URL type**:     The client will recieve the URL of the document as the Location header with the response with - `303 See Other` 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_content_get_with_http_info(api_id, document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str accept: Media types acceptable for the response. Default is application/json. 
        :param str if_none_match: Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec. 
        :param str if_modified_since: Validator for conditional requests; based on Last Modified header of the formerly retrieved variant of the resource. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'document_id', 'accept', 'if_none_match', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apis_api_id_documents_document_id_content_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params) or (params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `apis_api_id_documents_document_id_content_get`")
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `apis_api_id_documents_document_id_content_get`")


        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/apis/{apiId}/documents/{documentId}/content', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def apis_api_id_documents_document_id_content_post(self, api_id, document_id, content_type, **kwargs):
        """
        Upload the content of an API document
        Thid operation can be used to upload a file or add inline content to an API document.  **IMPORTANT:** * Either **file** or **inlineContent** form data parameters should be specified at one time. * Document's source type should be **FILE** in order to upload a file to the document using **file** parameter. * Document's source type should be **INLINE** in order to add inline content to the document using **inlineContent** parameter. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_content_post(api_id, document_id, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str content_type: Media type of the entity in the body. Default is application/json.  (required)
        :param file file: Document to upload
        :param str inline_content: Inline content of the document
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: Document1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apis_api_id_documents_document_id_content_post_with_http_info(api_id, document_id, content_type, **kwargs)
        else:
            (data) = self.apis_api_id_documents_document_id_content_post_with_http_info(api_id, document_id, content_type, **kwargs)
            return data

    def apis_api_id_documents_document_id_content_post_with_http_info(self, api_id, document_id, content_type, **kwargs):
        """
        Upload the content of an API document
        Thid operation can be used to upload a file or add inline content to an API document.  **IMPORTANT:** * Either **file** or **inlineContent** form data parameters should be specified at one time. * Document's source type should be **FILE** in order to upload a file to the document using **file** parameter. * Document's source type should be **INLINE** in order to add inline content to the document using **inlineContent** parameter. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_content_post_with_http_info(api_id, document_id, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str content_type: Media type of the entity in the body. Default is application/json.  (required)
        :param file file: Document to upload
        :param str inline_content: Inline content of the document
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: Document1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'document_id', 'content_type', 'file', 'inline_content', 'if_match', 'if_unmodified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apis_api_id_documents_document_id_content_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params) or (params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `apis_api_id_documents_document_id_content_post`")
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `apis_api_id_documents_document_id_content_post`")
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params) or (params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `apis_api_id_documents_document_id_content_post`")


        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']
        if 'inline_content' in params:
            form_params.append(('inlineContent', params['inline_content']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/apis/{apiId}/documents/{documentId}/content', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Document1',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def apis_api_id_documents_document_id_delete(self, api_id, document_id, **kwargs):
        """
        Delete a document of an API
        This operation can be used to delete a document associated with an API. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_delete(api_id, document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apis_api_id_documents_document_id_delete_with_http_info(api_id, document_id, **kwargs)
        else:
            (data) = self.apis_api_id_documents_document_id_delete_with_http_info(api_id, document_id, **kwargs)
            return data

    def apis_api_id_documents_document_id_delete_with_http_info(self, api_id, document_id, **kwargs):
        """
        Delete a document of an API
        This operation can be used to delete a document associated with an API. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_delete_with_http_info(api_id, document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'document_id', 'if_match', 'if_unmodified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apis_api_id_documents_document_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params) or (params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `apis_api_id_documents_document_id_delete`")
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `apis_api_id_documents_document_id_delete`")


        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/apis/{apiId}/documents/{documentId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def apis_api_id_documents_document_id_get(self, api_id, document_id, **kwargs):
        """
        Get a document of an API
        This operation can be used to retrieve a particular document's metadata associated with an API. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_get(api_id, document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str accept: Media types acceptable for the response. Default is application/json. 
        :param str if_none_match: Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec. 
        :param str if_modified_since: Validator for conditional requests; based on Last Modified header of the formerly retrieved variant of the resource. 
        :return: Document1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apis_api_id_documents_document_id_get_with_http_info(api_id, document_id, **kwargs)
        else:
            (data) = self.apis_api_id_documents_document_id_get_with_http_info(api_id, document_id, **kwargs)
            return data

    def apis_api_id_documents_document_id_get_with_http_info(self, api_id, document_id, **kwargs):
        """
        Get a document of an API
        This operation can be used to retrieve a particular document's metadata associated with an API. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_get_with_http_info(api_id, document_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param str accept: Media types acceptable for the response. Default is application/json. 
        :param str if_none_match: Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec. 
        :param str if_modified_since: Validator for conditional requests; based on Last Modified header of the formerly retrieved variant of the resource. 
        :return: Document1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'document_id', 'accept', 'if_none_match', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apis_api_id_documents_document_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params) or (params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `apis_api_id_documents_document_id_get`")
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `apis_api_id_documents_document_id_get`")


        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/apis/{apiId}/documents/{documentId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Document1',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def apis_api_id_documents_document_id_put(self, api_id, document_id, body, content_type, **kwargs):
        """
        Update a document of an API
        This operation can be used to update metadata of an API's document. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_put(api_id, document_id, body, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param Document3 body: Document object that needs to be added  (required)
        :param str content_type: Media type of the entity in the body. Default is application/json.  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: Document1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apis_api_id_documents_document_id_put_with_http_info(api_id, document_id, body, content_type, **kwargs)
        else:
            (data) = self.apis_api_id_documents_document_id_put_with_http_info(api_id, document_id, body, content_type, **kwargs)
            return data

    def apis_api_id_documents_document_id_put_with_http_info(self, api_id, document_id, body, content_type, **kwargs):
        """
        Update a document of an API
        This operation can be used to update metadata of an API's document. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apis_api_id_documents_document_id_put_with_http_info(api_id, document_id, body, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str api_id: **API ID** consisting of the **UUID** of the API. The combination of the provider of the API, name of the API and the version is also accepted as a valid API ID. Should be formatted as **provider-name-version**.  (required)
        :param str document_id: Document Identifier  (required)
        :param Document3 body: Document object that needs to be added  (required)
        :param str content_type: Media type of the entity in the body. Default is application/json.  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: Document1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'document_id', 'body', 'content_type', 'if_match', 'if_unmodified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apis_api_id_documents_document_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params) or (params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `apis_api_id_documents_document_id_put`")
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params) or (params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `apis_api_id_documents_document_id_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apis_api_id_documents_document_id_put`")
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params) or (params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `apis_api_id_documents_document_id_put`")


        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/apis/{apiId}/documents/{documentId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Document1',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
