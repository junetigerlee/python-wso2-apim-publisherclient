# coding: utf-8

"""
    WSO2 API Manager - Publisher API

    This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class APIObject2(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'context': 'str',
        'version': 'str',
        'provider': 'str',
        'api_definition': 'str',
        'wsdl_uri': 'str',
        'status': 'str',
        'response_caching': 'str',
        'cache_timeout': 'int',
        'destination_stats_enabled': 'str',
        'is_default_version': 'bool',
        'type': 'str',
        'transport': 'list[str]',
        'tags': 'list[str]',
        'tiers': 'list[str]',
        'max_tps': 'ApisMaxTps',
        'thumbnail_uri': 'str',
        'visibility': 'str',
        'visible_roles': 'list[str]',
        'visible_tenants': 'list[str]',
        'endpoint_config': 'str',
        'endpoint_security': 'ApisEndpointSecurity',
        'gateway_environments': 'str',
        'sequences': 'list[Sequence1]',
        'subscription_availability': 'str',
        'subscription_available_tenants': 'list[str]',
        'business_information': 'ApisBusinessInformation',
        'cors_configuration': 'ApisCorsConfiguration'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'context': 'context',
        'version': 'version',
        'provider': 'provider',
        'api_definition': 'apiDefinition',
        'wsdl_uri': 'wsdlUri',
        'status': 'status',
        'response_caching': 'responseCaching',
        'cache_timeout': 'cacheTimeout',
        'destination_stats_enabled': 'destinationStatsEnabled',
        'is_default_version': 'isDefaultVersion',
        'type': 'type',
        'transport': 'transport',
        'tags': 'tags',
        'tiers': 'tiers',
        'max_tps': 'maxTps',
        'thumbnail_uri': 'thumbnailUri',
        'visibility': 'visibility',
        'visible_roles': 'visibleRoles',
        'visible_tenants': 'visibleTenants',
        'endpoint_config': 'endpointConfig',
        'endpoint_security': 'endpointSecurity',
        'gateway_environments': 'gatewayEnvironments',
        'sequences': 'sequences',
        'subscription_availability': 'subscriptionAvailability',
        'subscription_available_tenants': 'subscriptionAvailableTenants',
        'business_information': 'businessInformation',
        'cors_configuration': 'corsConfiguration'
    }

    def __init__(self, id=None, name=None, description=None, context=None, version=None, provider=None, api_definition=None, wsdl_uri=None, status=None, response_caching=None, cache_timeout=None, destination_stats_enabled=None, is_default_version=None, type='HTTP', transport=None, tags=None, tiers=None, max_tps=None, thumbnail_uri=None, visibility=None, visible_roles=None, visible_tenants=None, endpoint_config=None, endpoint_security=None, gateway_environments=None, sequences=None, subscription_availability=None, subscription_available_tenants=None, business_information=None, cors_configuration=None):
        """
        APIObject2 - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._context = None
        self._version = None
        self._provider = None
        self._api_definition = None
        self._wsdl_uri = None
        self._status = None
        self._response_caching = None
        self._cache_timeout = None
        self._destination_stats_enabled = None
        self._is_default_version = None
        self._type = None
        self._transport = None
        self._tags = None
        self._tiers = None
        self._max_tps = None
        self._thumbnail_uri = None
        self._visibility = None
        self._visible_roles = None
        self._visible_tenants = None
        self._endpoint_config = None
        self._endpoint_security = None
        self._gateway_environments = None
        self._sequences = None
        self._subscription_availability = None
        self._subscription_available_tenants = None
        self._business_information = None
        self._cors_configuration = None

        if id is not None:
          self.id = id
        self.name = name
        if description is not None:
          self.description = description
        self.context = context
        self.version = version
        if provider is not None:
          self.provider = provider
        if api_definition is not None:
          self.api_definition = api_definition
        if wsdl_uri is not None:
          self.wsdl_uri = wsdl_uri
        if status is not None:
          self.status = status
        if response_caching is not None:
          self.response_caching = response_caching
        if cache_timeout is not None:
          self.cache_timeout = cache_timeout
        if destination_stats_enabled is not None:
          self.destination_stats_enabled = destination_stats_enabled
        self.is_default_version = is_default_version
        self.type = type
        self.transport = transport
        if tags is not None:
          self.tags = tags
        self.tiers = tiers
        if max_tps is not None:
          self.max_tps = max_tps
        if thumbnail_uri is not None:
          self.thumbnail_uri = thumbnail_uri
        self.visibility = visibility
        if visible_roles is not None:
          self.visible_roles = visible_roles
        if visible_tenants is not None:
          self.visible_tenants = visible_tenants
        self.endpoint_config = endpoint_config
        if endpoint_security is not None:
          self.endpoint_security = endpoint_security
        if gateway_environments is not None:
          self.gateway_environments = gateway_environments
        if sequences is not None:
          self.sequences = sequences
        if subscription_availability is not None:
          self.subscription_availability = subscription_availability
        if subscription_available_tenants is not None:
          self.subscription_available_tenants = subscription_available_tenants
        if business_information is not None:
          self.business_information = business_information
        if cors_configuration is not None:
          self.cors_configuration = cors_configuration

    @property
    def id(self):
        """
        Gets the id of this APIObject2.
        UUID of the api registry artifact 

        :return: The id of this APIObject2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this APIObject2.
        UUID of the api registry artifact 

        :param id: The id of this APIObject2.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this APIObject2.

        :return: The name of this APIObject2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this APIObject2.

        :param name: The name of this APIObject2.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this APIObject2.

        :return: The description of this APIObject2.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this APIObject2.

        :param description: The description of this APIObject2.
        :type: str
        """

        self._description = description

    @property
    def context(self):
        """
        Gets the context of this APIObject2.

        :return: The context of this APIObject2.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this APIObject2.

        :param context: The context of this APIObject2.
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def version(self):
        """
        Gets the version of this APIObject2.

        :return: The version of this APIObject2.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this APIObject2.

        :param version: The version of this APIObject2.
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def provider(self):
        """
        Gets the provider of this APIObject2.
        If the provider value is not given user invoking the api will be used as the provider. 

        :return: The provider of this APIObject2.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this APIObject2.
        If the provider value is not given user invoking the api will be used as the provider. 

        :param provider: The provider of this APIObject2.
        :type: str
        """

        self._provider = provider

    @property
    def api_definition(self):
        """
        Gets the api_definition of this APIObject2.
        Swagger definition of the API which contains details about URI templates and scopes 

        :return: The api_definition of this APIObject2.
        :rtype: str
        """
        return self._api_definition

    @api_definition.setter
    def api_definition(self, api_definition):
        """
        Sets the api_definition of this APIObject2.
        Swagger definition of the API which contains details about URI templates and scopes 

        :param api_definition: The api_definition of this APIObject2.
        :type: str
        """

        self._api_definition = api_definition

    @property
    def wsdl_uri(self):
        """
        Gets the wsdl_uri of this APIObject2.
        WSDL URL if the API is based on a WSDL endpoint 

        :return: The wsdl_uri of this APIObject2.
        :rtype: str
        """
        return self._wsdl_uri

    @wsdl_uri.setter
    def wsdl_uri(self, wsdl_uri):
        """
        Sets the wsdl_uri of this APIObject2.
        WSDL URL if the API is based on a WSDL endpoint 

        :param wsdl_uri: The wsdl_uri of this APIObject2.
        :type: str
        """

        self._wsdl_uri = wsdl_uri

    @property
    def status(self):
        """
        Gets the status of this APIObject2.

        :return: The status of this APIObject2.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this APIObject2.

        :param status: The status of this APIObject2.
        :type: str
        """

        self._status = status

    @property
    def response_caching(self):
        """
        Gets the response_caching of this APIObject2.

        :return: The response_caching of this APIObject2.
        :rtype: str
        """
        return self._response_caching

    @response_caching.setter
    def response_caching(self, response_caching):
        """
        Sets the response_caching of this APIObject2.

        :param response_caching: The response_caching of this APIObject2.
        :type: str
        """

        self._response_caching = response_caching

    @property
    def cache_timeout(self):
        """
        Gets the cache_timeout of this APIObject2.

        :return: The cache_timeout of this APIObject2.
        :rtype: int
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """
        Sets the cache_timeout of this APIObject2.

        :param cache_timeout: The cache_timeout of this APIObject2.
        :type: int
        """

        self._cache_timeout = cache_timeout

    @property
    def destination_stats_enabled(self):
        """
        Gets the destination_stats_enabled of this APIObject2.

        :return: The destination_stats_enabled of this APIObject2.
        :rtype: str
        """
        return self._destination_stats_enabled

    @destination_stats_enabled.setter
    def destination_stats_enabled(self, destination_stats_enabled):
        """
        Sets the destination_stats_enabled of this APIObject2.

        :param destination_stats_enabled: The destination_stats_enabled of this APIObject2.
        :type: str
        """

        self._destination_stats_enabled = destination_stats_enabled

    @property
    def is_default_version(self):
        """
        Gets the is_default_version of this APIObject2.

        :return: The is_default_version of this APIObject2.
        :rtype: bool
        """
        return self._is_default_version

    @is_default_version.setter
    def is_default_version(self, is_default_version):
        """
        Sets the is_default_version of this APIObject2.

        :param is_default_version: The is_default_version of this APIObject2.
        :type: bool
        """
        if is_default_version is None:
            raise ValueError("Invalid value for `is_default_version`, must not be `None`")

        self._is_default_version = is_default_version

    @property
    def type(self):
        """
        Gets the type of this APIObject2.

        :return: The type of this APIObject2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this APIObject2.

        :param type: The type of this APIObject2.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = ["HTTP", "WS"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def transport(self):
        """
        Gets the transport of this APIObject2.
        Supported transports for the API (http and/or https). 

        :return: The transport of this APIObject2.
        :rtype: list[str]
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """
        Sets the transport of this APIObject2.
        Supported transports for the API (http and/or https). 

        :param transport: The transport of this APIObject2.
        :type: list[str]
        """
        if transport is None:
            raise ValueError("Invalid value for `transport`, must not be `None`")

        self._transport = transport

    @property
    def tags(self):
        """
        Gets the tags of this APIObject2.

        :return: The tags of this APIObject2.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this APIObject2.

        :param tags: The tags of this APIObject2.
        :type: list[str]
        """

        self._tags = tags

    @property
    def tiers(self):
        """
        Gets the tiers of this APIObject2.

        :return: The tiers of this APIObject2.
        :rtype: list[str]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """
        Sets the tiers of this APIObject2.

        :param tiers: The tiers of this APIObject2.
        :type: list[str]
        """
        if tiers is None:
            raise ValueError("Invalid value for `tiers`, must not be `None`")

        self._tiers = tiers

    @property
    def max_tps(self):
        """
        Gets the max_tps of this APIObject2.

        :return: The max_tps of this APIObject2.
        :rtype: ApisMaxTps
        """
        return self._max_tps

    @max_tps.setter
    def max_tps(self, max_tps):
        """
        Sets the max_tps of this APIObject2.

        :param max_tps: The max_tps of this APIObject2.
        :type: ApisMaxTps
        """

        self._max_tps = max_tps

    @property
    def thumbnail_uri(self):
        """
        Gets the thumbnail_uri of this APIObject2.

        :return: The thumbnail_uri of this APIObject2.
        :rtype: str
        """
        return self._thumbnail_uri

    @thumbnail_uri.setter
    def thumbnail_uri(self, thumbnail_uri):
        """
        Sets the thumbnail_uri of this APIObject2.

        :param thumbnail_uri: The thumbnail_uri of this APIObject2.
        :type: str
        """

        self._thumbnail_uri = thumbnail_uri

    @property
    def visibility(self):
        """
        Gets the visibility of this APIObject2.

        :return: The visibility of this APIObject2.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this APIObject2.

        :param visibility: The visibility of this APIObject2.
        :type: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")
        allowed_values = ["PUBLIC", "PRIVATE", "RESTRICTED", "CONTROLLED"]
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def visible_roles(self):
        """
        Gets the visible_roles of this APIObject2.

        :return: The visible_roles of this APIObject2.
        :rtype: list[str]
        """
        return self._visible_roles

    @visible_roles.setter
    def visible_roles(self, visible_roles):
        """
        Sets the visible_roles of this APIObject2.

        :param visible_roles: The visible_roles of this APIObject2.
        :type: list[str]
        """

        self._visible_roles = visible_roles

    @property
    def visible_tenants(self):
        """
        Gets the visible_tenants of this APIObject2.

        :return: The visible_tenants of this APIObject2.
        :rtype: list[str]
        """
        return self._visible_tenants

    @visible_tenants.setter
    def visible_tenants(self, visible_tenants):
        """
        Sets the visible_tenants of this APIObject2.

        :param visible_tenants: The visible_tenants of this APIObject2.
        :type: list[str]
        """

        self._visible_tenants = visible_tenants

    @property
    def endpoint_config(self):
        """
        Gets the endpoint_config of this APIObject2.

        :return: The endpoint_config of this APIObject2.
        :rtype: str
        """
        return self._endpoint_config

    @endpoint_config.setter
    def endpoint_config(self, endpoint_config):
        """
        Sets the endpoint_config of this APIObject2.

        :param endpoint_config: The endpoint_config of this APIObject2.
        :type: str
        """
        if endpoint_config is None:
            raise ValueError("Invalid value for `endpoint_config`, must not be `None`")

        self._endpoint_config = endpoint_config

    @property
    def endpoint_security(self):
        """
        Gets the endpoint_security of this APIObject2.

        :return: The endpoint_security of this APIObject2.
        :rtype: ApisEndpointSecurity
        """
        return self._endpoint_security

    @endpoint_security.setter
    def endpoint_security(self, endpoint_security):
        """
        Sets the endpoint_security of this APIObject2.

        :param endpoint_security: The endpoint_security of this APIObject2.
        :type: ApisEndpointSecurity
        """

        self._endpoint_security = endpoint_security

    @property
    def gateway_environments(self):
        """
        Gets the gateway_environments of this APIObject2.
        Comma separated list of gateway environments. 

        :return: The gateway_environments of this APIObject2.
        :rtype: str
        """
        return self._gateway_environments

    @gateway_environments.setter
    def gateway_environments(self, gateway_environments):
        """
        Sets the gateway_environments of this APIObject2.
        Comma separated list of gateway environments. 

        :param gateway_environments: The gateway_environments of this APIObject2.
        :type: str
        """

        self._gateway_environments = gateway_environments

    @property
    def sequences(self):
        """
        Gets the sequences of this APIObject2.

        :return: The sequences of this APIObject2.
        :rtype: list[Sequence1]
        """
        return self._sequences

    @sequences.setter
    def sequences(self, sequences):
        """
        Sets the sequences of this APIObject2.

        :param sequences: The sequences of this APIObject2.
        :type: list[Sequence1]
        """

        self._sequences = sequences

    @property
    def subscription_availability(self):
        """
        Gets the subscription_availability of this APIObject2.

        :return: The subscription_availability of this APIObject2.
        :rtype: str
        """
        return self._subscription_availability

    @subscription_availability.setter
    def subscription_availability(self, subscription_availability):
        """
        Sets the subscription_availability of this APIObject2.

        :param subscription_availability: The subscription_availability of this APIObject2.
        :type: str
        """
        allowed_values = ["current_tenant", "all_tenants", "specific_tenants"]
        if subscription_availability not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_availability` ({0}), must be one of {1}"
                .format(subscription_availability, allowed_values)
            )

        self._subscription_availability = subscription_availability

    @property
    def subscription_available_tenants(self):
        """
        Gets the subscription_available_tenants of this APIObject2.

        :return: The subscription_available_tenants of this APIObject2.
        :rtype: list[str]
        """
        return self._subscription_available_tenants

    @subscription_available_tenants.setter
    def subscription_available_tenants(self, subscription_available_tenants):
        """
        Sets the subscription_available_tenants of this APIObject2.

        :param subscription_available_tenants: The subscription_available_tenants of this APIObject2.
        :type: list[str]
        """

        self._subscription_available_tenants = subscription_available_tenants

    @property
    def business_information(self):
        """
        Gets the business_information of this APIObject2.

        :return: The business_information of this APIObject2.
        :rtype: ApisBusinessInformation
        """
        return self._business_information

    @business_information.setter
    def business_information(self, business_information):
        """
        Sets the business_information of this APIObject2.

        :param business_information: The business_information of this APIObject2.
        :type: ApisBusinessInformation
        """

        self._business_information = business_information

    @property
    def cors_configuration(self):
        """
        Gets the cors_configuration of this APIObject2.

        :return: The cors_configuration of this APIObject2.
        :rtype: ApisCorsConfiguration
        """
        return self._cors_configuration

    @cors_configuration.setter
    def cors_configuration(self, cors_configuration):
        """
        Sets the cors_configuration of this APIObject2.

        :param cors_configuration: The cors_configuration of this APIObject2.
        :type: ApisCorsConfiguration
        """

        self._cors_configuration = cors_configuration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, APIObject2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
