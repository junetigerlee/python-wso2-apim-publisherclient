# coding: utf-8

"""
    WSO2 API Manager - Publisher API

    This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relative_path': 'str',
        'media_type': 'str'
    }

    attribute_map = {
        'relative_path': 'relativePath',
        'media_type': 'mediaType'
    }

    def __init__(self, relative_path=None, media_type=None):
        """
        FileInfo - a model defined in Swagger
        """

        self._relative_path = None
        self._media_type = None

        if relative_path is not None:
          self.relative_path = relative_path
        if media_type is not None:
          self.media_type = media_type

    @property
    def relative_path(self):
        """
        Gets the relative_path of this FileInfo.
        relative location of the file (excluding the base context and host of the Publisher API)

        :return: The relative_path of this FileInfo.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """
        Sets the relative_path of this FileInfo.
        relative location of the file (excluding the base context and host of the Publisher API)

        :param relative_path: The relative_path of this FileInfo.
        :type: str
        """

        self._relative_path = relative_path

    @property
    def media_type(self):
        """
        Gets the media_type of this FileInfo.
        media-type of the file

        :return: The media_type of this FileInfo.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """
        Sets the media_type of this FileInfo.
        media-type of the file

        :param media_type: The media_type of this FileInfo.
        :type: str
        """

        self._media_type = media_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
