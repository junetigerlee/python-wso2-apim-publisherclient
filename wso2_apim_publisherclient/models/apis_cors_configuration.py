# coding: utf-8

"""
    WSO2 API Manager - Publisher API

    This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApisCorsConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cors_configuration_enabled': 'bool',
        'access_control_allow_origins': 'list[str]',
        'access_control_allow_credentials': 'bool',
        'access_control_allow_headers': 'list[str]',
        'access_control_allow_methods': 'list[str]'
    }

    attribute_map = {
        'cors_configuration_enabled': 'corsConfigurationEnabled',
        'access_control_allow_origins': 'accessControlAllowOrigins',
        'access_control_allow_credentials': 'accessControlAllowCredentials',
        'access_control_allow_headers': 'accessControlAllowHeaders',
        'access_control_allow_methods': 'accessControlAllowMethods'
    }

    def __init__(self, cors_configuration_enabled=False, access_control_allow_origins=None, access_control_allow_credentials=False, access_control_allow_headers=None, access_control_allow_methods=None):
        """
        ApisCorsConfiguration - a model defined in Swagger
        """

        self._cors_configuration_enabled = None
        self._access_control_allow_origins = None
        self._access_control_allow_credentials = None
        self._access_control_allow_headers = None
        self._access_control_allow_methods = None

        if cors_configuration_enabled is not None:
          self.cors_configuration_enabled = cors_configuration_enabled
        if access_control_allow_origins is not None:
          self.access_control_allow_origins = access_control_allow_origins
        if access_control_allow_credentials is not None:
          self.access_control_allow_credentials = access_control_allow_credentials
        if access_control_allow_headers is not None:
          self.access_control_allow_headers = access_control_allow_headers
        if access_control_allow_methods is not None:
          self.access_control_allow_methods = access_control_allow_methods

    @property
    def cors_configuration_enabled(self):
        """
        Gets the cors_configuration_enabled of this ApisCorsConfiguration.

        :return: The cors_configuration_enabled of this ApisCorsConfiguration.
        :rtype: bool
        """
        return self._cors_configuration_enabled

    @cors_configuration_enabled.setter
    def cors_configuration_enabled(self, cors_configuration_enabled):
        """
        Sets the cors_configuration_enabled of this ApisCorsConfiguration.

        :param cors_configuration_enabled: The cors_configuration_enabled of this ApisCorsConfiguration.
        :type: bool
        """

        self._cors_configuration_enabled = cors_configuration_enabled

    @property
    def access_control_allow_origins(self):
        """
        Gets the access_control_allow_origins of this ApisCorsConfiguration.

        :return: The access_control_allow_origins of this ApisCorsConfiguration.
        :rtype: list[str]
        """
        return self._access_control_allow_origins

    @access_control_allow_origins.setter
    def access_control_allow_origins(self, access_control_allow_origins):
        """
        Sets the access_control_allow_origins of this ApisCorsConfiguration.

        :param access_control_allow_origins: The access_control_allow_origins of this ApisCorsConfiguration.
        :type: list[str]
        """

        self._access_control_allow_origins = access_control_allow_origins

    @property
    def access_control_allow_credentials(self):
        """
        Gets the access_control_allow_credentials of this ApisCorsConfiguration.

        :return: The access_control_allow_credentials of this ApisCorsConfiguration.
        :rtype: bool
        """
        return self._access_control_allow_credentials

    @access_control_allow_credentials.setter
    def access_control_allow_credentials(self, access_control_allow_credentials):
        """
        Sets the access_control_allow_credentials of this ApisCorsConfiguration.

        :param access_control_allow_credentials: The access_control_allow_credentials of this ApisCorsConfiguration.
        :type: bool
        """

        self._access_control_allow_credentials = access_control_allow_credentials

    @property
    def access_control_allow_headers(self):
        """
        Gets the access_control_allow_headers of this ApisCorsConfiguration.

        :return: The access_control_allow_headers of this ApisCorsConfiguration.
        :rtype: list[str]
        """
        return self._access_control_allow_headers

    @access_control_allow_headers.setter
    def access_control_allow_headers(self, access_control_allow_headers):
        """
        Sets the access_control_allow_headers of this ApisCorsConfiguration.

        :param access_control_allow_headers: The access_control_allow_headers of this ApisCorsConfiguration.
        :type: list[str]
        """

        self._access_control_allow_headers = access_control_allow_headers

    @property
    def access_control_allow_methods(self):
        """
        Gets the access_control_allow_methods of this ApisCorsConfiguration.

        :return: The access_control_allow_methods of this ApisCorsConfiguration.
        :rtype: list[str]
        """
        return self._access_control_allow_methods

    @access_control_allow_methods.setter
    def access_control_allow_methods(self, access_control_allow_methods):
        """
        Sets the access_control_allow_methods of this ApisCorsConfiguration.

        :param access_control_allow_methods: The access_control_allow_methods of this ApisCorsConfiguration.
        :type: list[str]
        """

        self._access_control_allow_methods = access_control_allow_methods

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApisCorsConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
